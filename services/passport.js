// passport handles authentication
const passport = require('passport');
// handles the google oauth authentication
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const keys = require('../config/keys');
const mongoose = require('mongoose');
// User is the model class from user.js
const User = mongoose.model('users');
// serializeUser determines which data of the user object should be stored in the session
// user is the user model
passport.serializeUser((user, done) => {
  // user.id is not profile id, it is the unique id generated by mongo
  done(null, user.id);
});
// id is the serialized id in the user
passport.deserializeUser((id, done) => {
  User.findById(id).then((user) => {
    done(null, user);
  });
});

// new GoogleStrategy() creates an new instance of google passport strategy
// passport.use is like register and telling the passport to use the google strategy
passport.use(new GoogleStrategy({
  clientID: keys.googleClientID,
  clientSecret: keys.googleCLientSecret,
  callbackURL: '/auth/google/callback'
}, (accessToken, refreshToken, profile, done) => {
  // findone is to filter the already existing id and finds the first matching id
  User.findOne({ googleId: profile.id }).then((existingUser) => {
    if (existingUser) {
      // we already have a record with the given profile id
      // done indicates passport that we are done with 2 args.
      // 1st arg will be an error object, 2nd arg will be user record
      done(null, existingUser);
    } else {
      new User({
        googleId: profile.id
      }).save().then(user => done(null, user));
    }
  })
}));
